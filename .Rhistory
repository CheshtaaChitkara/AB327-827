#### Load libraries ####
library("dada2")
library("phyloseq")
library("Biostrings")
library("ggplot2")
library("dplyr")
library("tidyr")
library("tibble")
library("readxl")
library("readr")
library("stringr")
library("kableExtra")
library("tidyverse")
library("plyr")
library("R.utils")
# If you want to set a new working directory:
setwd("C:/Users/cheshtaac/Documents/git/AB327-827")
# Define the name of directories to use.
fastq_dir <- "fastq_unzipped"  # fastq directory with the samples that will be used
database_dir <- "databases/"  # folder with the PR2 database https://github.com/vaulot/metabarcodes_tutorials/tree/master/databases
filtered_dir <- "fastq_filtered/"  # for the fastq-files after filtering
qual_dir <- "qual_pdf/"  # quality scores plots
dada2_dir <- "dada2_results/"  # dada2 results
blast_dir <- "blast/"  # blast2 results
# I have prepared a taxonomy file that I can put on github, if necessary.
taxa <- readRDS(str_c(dada2_dir, "taxa.rds"))
# I have prepared a taxonomy file that I can put on github, if necessary.
taxa <- readRDS(str_c(dada2_dir, "dada2.taxa.rds"))
# Export information in tab or comma separated files
# Tab:
write_tsv(as_tibble(taxa$tax), file = str_c(dada2_dir, "taxa.txt"))
#### Appending taxonomy and boot to the sequence table ####
taxa_tax <- as.data.frame(taxa$tax)
taxa_boot <- as.data.frame(taxa$boot) %>% rename_all(funs(str_c(., "_boot")))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
primer_set_fwd = c("CCAGCAGCCGCGGTAATTCC", "CCAGCACCCGCGGTAATTCC", "CCAGCAGCTGCGGTAATTCC",
"CCAGCACCTGCGGTAATTCC")
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns <- fns[str_detect(basename(fns), ".fastq")]
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 1]
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
####
# Prepare the outputnames for filtered reads:
filt_R1 <- str_c(filtered_dir, sample.names, "_R1_filt.fastq")
filt_R2 <- str_c(filtered_dir, sample.names, "_R2_filt.fastq")
out <- filterAndTrim(fns_R1, filt_R1, fns_R2, filt_R2, truncLen = c(250, 200),
trimLeft = c(primer_length_fwd, primer_length_rev), maxN = 0,
maxEE = c(2, 2), truncQ = 2, rm.phix = TRUE,
compress = FALSE, multithread = TRUE)
derep_R1 <- derepFastq(filt_R1, verbose = FALSE)
derep_R2 <- derepFastq(filt_R2, verbose = FALSE)
# Name the derep-class objects by the sample names
names(derep_R1) <- sample.names
names(derep_R2) <- sample.names
dada_R1 <- dada(derep_R1, err = err_R1, multithread = TRUE, pool = FALSE)
#### STEP 2. Learn Errors
err_R1 <- learnErrors(filt_R1, multithread = TRUE)
err_R2 <- learnErrors(filt_R2, multithread = T)
dada_R1 <- dada(derep_R1, err = err_R1, multithread = TRUE, pool = FALSE)
dada_R2 <- dada(derep_R2, err = err_R2, multithread = TRUE, pool = FALSE)
#### STEP 5. Merge Sequences
mergers <- mergePairs(dada_R1, derep_R1, dada_R2, derep_R2, verbose = TRUE)
#### STEP 6. Merge  ####
seqtab <- makeSequenceTable(mergers)
# Make a transposed version of seqtab to make it similar to data in mothur
t_seqtab <- t(seqtab) # the function t() is a simple transposing of the matrix
#### STEP 7. Remove chimeras ####
seqtab.nochim <- removeBimeraDenovo(seqtab, method = "consensus", multithread = FALSE,
verbose = TRUE)
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
#### Track number of reads at each step
getN <- function(x) sum(getUniques(x)) # example of a function in R
track <- cbind(out, sapply(dada_R1, getN), sapply(mergers, getN), rowSums(seqtab),
rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoised", "merged", "tabled", "nonchim")
rownames(track) <- sample.names
seqtab.nochim_trans <- as.data.frame(t(seqtab.nochim)) %>% rownames_to_column(var = "sequence") %>%
rowid_to_column(var = "OTUNumber") %>% mutate(OTUNumber = sprintf("OTU_%05d",
OTUNumber)) %>% mutate(sequence = str_replace_all(sequence, "(-|\\.)", ""))
#### Extract the sequences and export them in a fasta file:
df <- seqtab.nochim_trans
seq_out <- Biostrings::DNAStringSet(df$sequence)
names(seq_out) <- df$OTUNumber
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
unique(seqtab.nochim_trans$Supergroup)
#### Filter for 18S ####
# Define a minimum bootstrap value for filtering
# Think before applying the cut-off! What is the benefits of removing
# OTUs with low support? What are the drawbacks?
bootstrap_min <- 80
# Remove OTU with annotation below the bootstrap value
seqtab.nochim_18S <- seqtab.nochim_trans %>% dplyr::filter(Supergroup_boot >= bootstrap_min)
seqtab.nochim_18S <- seqtab.nochim_trans[which(seqtab.nochim_trans$Supergroup_boot>80),]
unique(seqtab.nochim_18S$Division)
seqtab.nochim_18S <- seqtab.nochim_trans %>% dplyr::filter(Supergroup_boot >=
bootstrap_min)
write_tsv(seqtab.nochim_18S, str_c(dada2_dir, "ISAFjord_dada2.database.tsv"))
df <- seqtab.nochim_trans
seq_out <- Biostrings::DNAStringSet(df$sequence)
names(seq_out) <- str_c(df$OTUNumber, df$Supergroup, df$Division, df$Class,
df$Order, df$Family, df$Genus, df$Species, df$Species_boot1, sep = "|")
Biostrings::writeXStringSet(seq_out, str_c(blast_dir, "OTU.fasta"), compress = FALSE,
width = 20000)
#### Make Phyloseq Object ####
samdf <- data.frame(sample_name = sample.names)
rownames(samdf) <- sample.names
rownames(seqtab.nochim_18S)<-seqtab.nochim_18S$OTUNumber
OTU <- seqtab.nochim_18S %>% select_if(is.numeric) %>%
select(-contains("_boot")) %>% as.matrix() %>% otu_table(taxa_are_rows = TRUE)
TAX <- seqtab.nochim_18S %>% select(Kingdom:Species) %>%
as.matrix() %>% tax_table()
ps_dada2 <- phyloseq(OTU, sample_data(samdf), TAX)
### Saving and loading data ####
# You can save selected objects:
saveRDS(ps_dada2, str_c(dada2_dir, "phyloseq.rds"))
